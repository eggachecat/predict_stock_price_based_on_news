SaveStockData(G.STOCK.ID, G.PERIOD)
SaveNewsData()
}
Main <- function(){
print("hello")
GetSourceData()
CombineData()
TrainNB()
abusiveProb <-LoadTable(G.ABUSIVE.DIR)
probTable <-LoadIndexTable(G.PROBABILITY.DIR)
#tobePredicted <- "美股 上涨"
keyworker = worker("keywords", topn = 10)
cutter = worker()
tobePredicted <- as.character(vector_keywords(cutter[tobePredicted],keyworker))
predictLabel <- Classifier(abusiveProb, probTable, tobePredicted)
}
print("hello")
Main()
source('D:/Workstations/R/final/final.R', encoding = 'UTF-8')
source('D:/Workstations/R/final/final.R', encoding = 'UTF-8')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R', encoding="UTF-8-BOM")
source('D:/Workstations/R/final/final.R', encoding="UTF-8")
source('D:/Workstations/R/final/final.R', encoding = 'UTF-8')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
?samples
?sample
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
?count.fields
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
print(dim(splitNews))
print(class(splitNews))
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
return (c(time = newsTime, keyWords = paste(keyWords, collapse = ',')))
}, error = function(e) {
cat(newsFileName, "go wrong! \n")
})
})
splitNews <- t(splitNews)
Dates <- unique(splitNews[,1])
print(class(splitNews))
xtsSplitNews <- xts(splitNews[,-1], as.Date(splitNews[,1], format ="%Y-%m-%d"))
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
write.table(t(newsData), file = G.KEYWORDS.DIR, fileEncoding = "utf-8", sep = ";", row.names = FALSE, col.names = TRUE)
print(class(splitNews))
print(dim(splitNews))
print(t(splitNews))
View(splitNews)
View(splitNews[1,1])
View(t(splitNews)[1,1])
View(t(splitNews)[1,])
View(t(splitNews)[1:5,])
View(splitNews[1:5,])
View(t(splitNews)[,1])
View(t(splitNews))
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
return (unname (c(time = newsTime, keyWords = paste(keyWords, collapse = ','))))
}, error = function(e) {
cat(newsFileName, "go wrong! \n")
})
})
splitNews <- t(splitNews)
Dates <- unique(splitNews[,1])
View(t(splitNews))
xtsSplitNews <- xts(splitNews[,-1], as.Date(splitNews[,1], format ="%Y-%m-%d"))
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
View(t(uname(splitNews)))
View(t(unname (splitNews)))
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
returnVecotr <- c(time = newsTime, keyWords = paste(keyWords, collapse = ','))
if(!any(is.na(data))){
return (returnVecotr)
}
}, error = function(e) {
cat(newsFileName, "go wrong! \n")
})
})
splitNews <- t(splitNews)
Dates <- unique(splitNews[,1])
View(t(splitNews))
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
returnVecotr <- c(time = newsTime, keyWords = paste(keyWords, collapse = ','))
if(!any(is.na(returnVecotr))){
return (returnVecotr)
}
}, error = function(e) {
cat(newsFileName, "go wrong! \n")
})
})
splitNews <- t(splitNews)
Dates <- unique(splitNews[,1])
View(t(splitNews))
View(splitNews)
print(splitNews[rowSums(is.na(data)) == 0,])
View(t(splitNews)[rowSums(is.na(data)) == 0,])
View(dim(splitNews))
prints(dim(t(splitNews)))
print(dim(t(splitNews)))
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
returnVecotr <- c(time = newsTime, keyWords = paste(keyWords, collapse = ','))
if(!any(is.na(returnVecotr))){
return (c(time = "0000-00-00", keyWords = ""))
}
}, error = function(e) {
return (c(time = "0000-00-00", keyWords = ""))
})
})
view(splitNews)
View(splitNews)
View(splitNews)
print(splitNews)
rm(list = ls())
G.INITIAL.FREQUENCY <- 2   # define min initial frequency => in case prob = 0
G.RETURN.THERSHOLD <- 0.5   # if > thershold -> up; if < thershold -> down
G.TrainRtio <- 0.5
G.STOCK.ID <- "2330.TW"   # MS ttr code
G.PERIOD <- "2015/2016"
G.NEWS.SOURCE.DIR <- "UTF8NEWS/"
G.NEWS.HEADER.SEP <- "[\uFF0E]" # the unicode for seperator in news
# Settings for dirs
G.ROOT.DIR <- "output/"
PathJoin <- function(p1, p2){
return(paste(p1, p2, sep = ""))
}
G.KEYWORDS.DIR <- PathJoin(G.ROOT.DIR, "keywords.txt")
G.LABEL.DIR <- PathJoin(G.ROOT.DIR, "labels.txt")
G.COMBINE.DIR <- PathJoin(G.ROOT.DIR, "coreData.txt")
G.TEST.DIR <- PathJoin(G.ROOT.DIR, "testData.txt")
G.FREQUENCY.DIR <- PathJoin(G.ROOT.DIR, "frequency.txt")
G.PROBABILITY.DIR <- PathJoin(G.ROOT.DIR, "probability.txt")
G.ABUSIVE.DIR <- PathJoin(G.ROOT.DIR, "abusive.txt")
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
returnVecotr <- c(time = newsTime, keyWords = paste(keyWords, collapse = ','))
if(!any(is.na(returnVecotr))){
return (c(time = newsTime, keyWords = paste(keyWords, collapse = ',')))
}
return (c(time = "0000-00-00", keyWords = ""))
}, error = function(e) {
return (c(time = "0000-00-00", keyWords = ""))
})
})
View(splitNews)
View(splitNews)
View(splitNews)
splitNews <- t(splitNews)
View(splitNews)
Dates <- unique(splitNews[,1])
print(dim(t(splitNews)))
xtsSplitNews <- xts(splitNews[,-1], as.Date(splitNews[,1], format ="%Y-%m-%d"))
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
write.table(t(newsData), file = G.KEYWORDS.DIR, fileEncoding = "utf-8", sep = ";", row.names = FALSE, col.names = TRUE)
View(splitNews)
View(splitNews)
filterSplitNews <- splitNews[splitNews$time != "000-00-00",]
filterSplitNews <- splitNews[splitNews[,1] != "000-00-00",]
View(filterSplitNews)
filterSplitNews <- subset(splitNews, time == "0000-00-00")
View(splitNews["time"])
print(names(splitNews))
print(names(splitNews))
print(colnames(splitNews))
filterSplitNews <- as.data.frame(splitNews)
View(filterSplitNews)
filterSplitNews <- subset(filterSplitNews, time != "0000-00-00")
View(filterSplitNews)
rm(list = ls())
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
rm(list = ls())
source('D:/Workstations/R/final/final.R')
newsFileNames <- list.files(path = G.NEWS.SOURCE.DIR, pattern = "*.txt", full.names = T)
keyworker = worker("keywords", topn = 10)
cutter = worker()
splitNews <- sapply(newsFileNames, function(newsFileName){
tryCatch({
newsText <- read.table(newsFileName, fileEncoding = "utf-8", sep = "\t")
newsHeader <- as.character(newsText[1,])
newsTime <- unlist(strsplit(newsHeader, G.NEWS.HEADER.SEP))[1]
newsContent <- toString (newsText[-1,])
keyWords <- vector_keywords(cutter[newsContent],keyworker)
returnVecotr <- c(time = newsTime, keyWords = paste(keyWords, collapse = ','))
if(!any(is.na(returnVecotr))){
return (c(time = newsTime, keyWords = paste(keyWords, collapse = ',')))
}
return (c(time = "0000-00-00", keyWords = ""))
}, error = function(e) {
return (c(time = "0000-00-00", keyWords = ""))
})
})
splitNews <- t(splitNews)
splitNews <- as.data.frame(splitNews)
splitNews <- subset(splitNews, time != "0000-00-00")    # remove error items
Dates <- unique(splitNews[,1])
xtsSplitNews <- xts(splitNews[,-1], as.Date(splitNews[,1], format ="%Y-%m-%d"))
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
write.table(t(newsData), file = G.KEYWORDS.DIR, fileEncoding = "utf-8", sep = ";", row.names = FALSE, col.names = TRUE)
View(splitNews)
View(xtsSplitNews)
print(Dates)
newsData <- sapply(Dates, function(date, xtsData){
print(date)
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
View(newsData)
splitNews$time <- as.Date(splitNews$time,  format ="%Y-%m-%d")
Dates <- unique(splitNews$time)
xtsSplitNews <- xts(splitNews$keyWords, splitNews$time)
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
View(newsData)
newsData <- sapply(Dates, function(date, xtsData){
return (c(time = date, keyWords = (paste(xtsData[date]$keyWords, collapse = ','))))
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates, function(date, xtsData){
print(xtsData[date][,1])
return (c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ','))))
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates, function(date, xtsData){
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:5], function(date, xtsData){
print(xtsData[date][,1])
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
print(xtsData[date][,1])
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
print(paste(as.character(xtsData[date][,1]), collapse = ','))
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
splitNews$keyWords <- as.character(splitNews$keyWords)
newsData <- sapply(Dates[1:2], function(date, xtsData){
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
xtsSplitNews <- xts(splitNews$keyWords, splitNews$time)
newsData <- sapply(Dates[1:2], function(date, xtsData){
print(paste(as.character(xtsData[date][,1]), collapse = ','))
returnVector <- c(time = date, keyWords = (paste(xtsData[date][,1], collapse = ',')))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
returnVector <- c(time = date, keyWords = cKeyWords)
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = cKeyWords)
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = cKeyWords)
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
returnVector <- c(time = date, keyWords = paste(as.character(xtsData[date][,1]), collapse = ','))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
returnVector <- c(time = date, keyWords = paste(as.character(xtsData[date][,1]), collapse = ','))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
returnVector <- c(time = date, keyWords = paste(as.character(xtsData[date][,1]), collapse = ','))
View(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(dim(cKeyWords))
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(class(cKeyWords))
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords[0])
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(date, as.character(cKeyWords))
print(returnVector["keyWords"])
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(date, as.character(cKeyWords))
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
print(is.vector(returnVector))
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
print(cKeyWords)
returnVector <- c(time = date, keyWords = as.character(cKeyWords))
returnVector <- as.vector(returnVector)
print(returnVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
newsVector <- c(time = date, keyWords = cKeyWords)
print(newsVector)
return (returnVector)
}, xtsData = xtsSplitNews)
newsData <- sapply(Dates[1:2], function(date, xtsData){
cKeyWords <- paste(as.character(xtsData[date][,1]), collapse = ',')
newsVector <- c(time = as.character(date), keyWords = cKeyWords)
print(newsVector)
return (returnVector)
}, xtsData = xtsSplitNews)
rm(list = ls())
source('D:/Workstations/R/final/final.R')
rm(list = ls())
source('D:/Workstations/R/final/final.R')
rm(list = ls())
source('D:/Workstations/R/final/final.R')
probTable <-LoadIndexTable(G.PROBABILITY.DIR)
print(probTable)
ScoreVector <- apply(testDataSet[1:2], 1, function(row){
tobePredicted <- as.character(unlist(strsplit(row["keyWords"], "[,]")))
predictLabel <- Classifier(abusiveProb, probTable, tobePredicted)
cat("System Predict it predicts in: ",predictLabel,"and Real: ", row["label"], "\n")
if(predictLabel == row["label"]){
return (TRUE)
}
return (FALSE)
})
abusiveProb <-LoadTable(G.ABUSIVE.DIR)
probTable <-LoadIndexTable(G.PROBABILITY.DIR)
testDataSet <- read.table(G.TEST.DIR, fileEncoding = "utf-8",header = TRUE, sep = ";")
ScoreVector <- apply(testDataSet[1:2], 1, function(row){
tobePredicted <- as.character(unlist(strsplit(row["keyWords"], "[,]")))
predictLabel <- Classifier(abusiveProb, probTable, tobePredicted)
cat("System Predict it predicts in: ",predictLabel,"and Real: ", row["label"], "\n")
if(predictLabel == row["label"]){
return (TRUE)
}
return (FALSE)
})
source('D:/Workstations/R/final/final.R')
source('D:/Workstations/R/final/final.R')
rm(list=ls())
source('D:/Workstations/R/final/final.R')
abusiveProb <-LoadTable(G.ABUSIVE.DIR)
probTable <-LoadIndexTable(G.PROBABILITY.DIR)
testDataSet <- read.table(G.TEST.DIR, fileEncoding = "utf-8",header = TRUE, sep = ";")
ScoreVector <- apply(testDataSet, 1, function(row){
tobePredicted <- as.character(unlist(strsplit(row["keyWords"], "[,]")))
predictLabel <- Classifier(abusiveProb, probTable, tobePredicted)
cat("System Predict it predicts in: ",predictLabel,"and Real: ", row["label"], "\n")
if(predictLabel == row["label"]){
return (TRUE)
}
return (FALSE)
})
abusiveProb <-LoadTable(G.ABUSIVE.DIR)
probTable <-LoadIndexTable(G.PROBABILITY.DIR)
testDataSet <- read.table(G.TEST.DIR, fileEncoding = "utf-8",header = TRUE, sep = ";")
ScoreVector <- apply(testDataSet, 1, function(row){
tobePredicted <- as.character(unlist(strsplit(row["keyWords"], "[,]")))
predictLabel <- Classifier(abusiveProb, probTable, tobePredicted)
cat("System Predict it predicts in: ",predictLabel,"and Real: ", row["label"], "\n")
if(predictLabel == row["label"]){
return (TRUE)
}
return (FALSE)
})
rm(list = ls())
source('D:/Workstations/R/final/final.R')
